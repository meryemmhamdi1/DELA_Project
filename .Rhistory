overalGradeDiff=Grade[length(Grade)]-Grade[1],
library(dplyr)
library(plyr) #ddply
#------ read data frame
db=read.csv('OutputTable.csv')
#------ sort submissions
db=db[order(db$UserID,db$ProblemID,db$SubmissionNumber),]
dim(db)
View(db)
#------- aggregate by UserID and ProblemID ---------
length(unique(db$UserID))
agg.features=ddply(db, .(UserID,ProblemID), summarise,
overalGradeDiff=Grade[length(Grade)]-Grade[1],
CountofSubmissions=length(SubmissionNumber),
countOfVideoandForumEvents= (sum(NVideoEvents,na.rm = T)+sum(NForumEvents,na.rm = T))  )
#------ remove cases with only one attempt
agg.features=filter(agg.features,CountofSubmissions>1); dim(agg.features)
#------ save feature file
write.csv(agg.features, file='features.csv')
db
db.names
names(db)
db.Grade
db$Grade
print(db)
names(df)
df
names(db)
m2 <- train(GradeDiff ~ CountOfSubmission,data=db,method='lm')
library(caret)
m2 <- train(GradeDiff ~ CountOfSubmission,data=db,method='lm')
library(dplyr)
library(plyr) #ddply
#------ read data frame
db=read.csv('OutputTable.csv')
#------ sort submissions
db=db[order(db$UserID,db$ProblemID,db$SubmissionNumber),]
dim(db)
View(db)
#------- aggregate by UserID and ProblemID ---------
length(unique(db$UserID))
agg.features=ddply(db, .(UserID,ProblemID), summarise,
overalGradeDiff=Grade[length(Grade)]-Grade[1],
CountofSubmissions=length(SubmissionNumber),
countOfVideoandForumEvents= (sum(NVideoEvents,na.rm = T)+sum(NForumEvents,na.rm = T))  )
#------ remove cases with only one attempt
agg.features=filter(agg.features,CountofSubmissions>1); dim(agg.features)
#------ save feature file
write.csv(agg.features, file='features.csv')
names(db)
names(agg)
names(agg.features)
agg.features
names(agg.features)
m2 <- train(overalGradeDiff ~ CountOfSubmissions,data=db,method='lm')
m2 <- train(overalGradeDiff ~ CountOfSubmissions,data=agg.features,method="lm")
names(agg.features)
m2 <- train(overalGradeDiff ~ CountofSubmissions,data=agg.features,method="lm")
summary(m2)
agg.features.shape
shape(agg.features)
